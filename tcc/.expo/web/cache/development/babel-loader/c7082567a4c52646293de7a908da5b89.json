{"ast":null,"code":"import { defineAnimation } from \"./util\";\nexport function withSequence() {\n  'worklet';\n\n  for (var _len = arguments.length, _animations = new Array(_len), _key = 0; _key < _len; _key++) {\n    _animations[_key] = arguments[_key];\n  }\n\n  return defineAnimation(_animations[0], function () {\n    'worklet';\n\n    var animations = _animations.map(function (a) {\n      var result = typeof a === 'function' ? a() : a;\n      result.finished = false;\n      return result;\n    });\n\n    var firstAnimation = animations[0];\n\n    var callback = function callback(finished) {\n      if (finished) {\n        return;\n      }\n\n      animations.forEach(function (animation) {\n        if (typeof animation.callback === 'function' && !animation.finished) {\n          animation.callback(finished);\n        }\n      });\n    };\n\n    function sequence(animation, now) {\n      var currentAnim = animations[animation.animationIndex];\n      var finished = currentAnim.onFrame(currentAnim, now);\n      animation.current = currentAnim.current;\n\n      if (finished) {\n        if (currentAnim.callback) {\n          currentAnim.callback(true);\n        }\n\n        currentAnim.finished = true;\n        animation.animationIndex += 1;\n\n        if (animation.animationIndex < animations.length) {\n          var nextAnim = animations[animation.animationIndex];\n          nextAnim.onStart(nextAnim, currentAnim.current, now, currentAnim);\n          return false;\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n\n    function onStart(animation, value, now, previousAnimation) {\n      if (animations.length === 1) {\n        throw Error('withSequence() animation require more than one animation as argument');\n      }\n\n      animation.animationIndex = 0;\n\n      if (previousAnimation === undefined) {\n        previousAnimation = animations[animations.length - 1];\n      }\n\n      firstAnimation.onStart(firstAnimation, value, now, previousAnimation);\n    }\n\n    return {\n      isHigherOrder: true,\n      onFrame: sequence,\n      onStart: onStart,\n      animationIndex: 0,\n      current: firstAnimation.current,\n      callback: callback\n    };\n  });\n}\nexport function sequence() {\n  'worklet';\n\n  console.warn('Method `sequence` is deprecated. Please use `withSequence` instead');\n  return withSequence.apply(void 0, arguments);\n}","map":{"version":3,"sources":["C:/Users/Gigio/Desktop/SENAI/Eletronicos/tcc/node_modules/react-native-reanimated/lib/reanimated2/animation/sequence.js"],"names":["defineAnimation","withSequence","_animations","animations","map","a","result","finished","firstAnimation","callback","forEach","animation","sequence","now","currentAnim","animationIndex","onFrame","current","length","nextAnim","onStart","value","previousAnimation","Error","undefined","isHigherOrder","console","warn"],"mappings":"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","sourcesContent":["import { defineAnimation } from './util';\r\nexport function withSequence(..._animations) {\r\n    'worklet';\r\n    return defineAnimation(_animations[0], () => {\r\n        'worklet';\r\n        const animations = _animations.map((a) => {\r\n            const result = typeof a === 'function' ? a() : a;\r\n            result.finished = false;\r\n            return result;\r\n        });\r\n        const firstAnimation = animations[0];\r\n        const callback = (finished) => {\r\n            if (finished) {\r\n                // we want to call the callback after every single animation\r\n                // not after all of them\r\n                return;\r\n            }\r\n            // this is going to be called only if sequence has been cancelled\r\n            animations.forEach((animation) => {\r\n                if (typeof animation.callback === 'function' && !animation.finished) {\r\n                    animation.callback(finished);\r\n                }\r\n            });\r\n        };\r\n        function sequence(animation, now) {\r\n            const currentAnim = animations[animation.animationIndex];\r\n            const finished = currentAnim.onFrame(currentAnim, now);\r\n            animation.current = currentAnim.current;\r\n            if (finished) {\r\n                // we want to call the callback after every single animation\r\n                if (currentAnim.callback) {\r\n                    currentAnim.callback(true /* finished */);\r\n                }\r\n                currentAnim.finished = true;\r\n                animation.animationIndex += 1;\r\n                if (animation.animationIndex < animations.length) {\r\n                    const nextAnim = animations[animation.animationIndex];\r\n                    nextAnim.onStart(nextAnim, currentAnim.current, now, currentAnim);\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        function onStart(animation, value, now, previousAnimation) {\r\n            if (animations.length === 1) {\r\n                throw Error('withSequence() animation require more than one animation as argument');\r\n            }\r\n            animation.animationIndex = 0;\r\n            if (previousAnimation === undefined) {\r\n                previousAnimation = animations[animations.length - 1];\r\n            }\r\n            firstAnimation.onStart(firstAnimation, value, now, previousAnimation);\r\n        }\r\n        return {\r\n            isHigherOrder: true,\r\n            onFrame: sequence,\r\n            onStart,\r\n            animationIndex: 0,\r\n            current: firstAnimation.current,\r\n            callback,\r\n        };\r\n    });\r\n}\r\n/**\r\n * @deprecated Kept for backward compatibility. Will be removed soon.\r\n */\r\nexport function sequence(..._animations) {\r\n    'worklet';\r\n    console.warn('Method `sequence` is deprecated. Please use `withSequence` instead');\r\n    return withSequence(..._animations);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}