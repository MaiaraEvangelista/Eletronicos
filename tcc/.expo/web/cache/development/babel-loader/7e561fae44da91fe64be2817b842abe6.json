{"ast":null,"code":"import { isWeb } from \"../PlatformChecker\";\nimport { useEvent, useHandler } from \"./Hooks\";\nexport var EventType;\n\n(function (EventType) {\n  EventType[EventType[\"UNDETERMINED\"] = 0] = \"UNDETERMINED\";\n  EventType[EventType[\"FAILED\"] = 1] = \"FAILED\";\n  EventType[EventType[\"BEGAN\"] = 2] = \"BEGAN\";\n  EventType[EventType[\"CANCELLED\"] = 3] = \"CANCELLED\";\n  EventType[EventType[\"ACTIVE\"] = 4] = \"ACTIVE\";\n  EventType[EventType[\"END\"] = 5] = \"END\";\n})(EventType || (EventType = {}));\n\nexport function useAnimatedGestureHandler(handlers, dependencies) {\n  var _useHandler = useHandler(handlers, dependencies),\n      context = _useHandler.context,\n      doDependenciesDiffer = _useHandler.doDependenciesDiffer,\n      useWeb = _useHandler.useWeb;\n\n  var handler = function handler(e) {\n    'worklet';\n\n    var event = useWeb ? e.nativeEvent : e;\n\n    if (event.state === EventType.BEGAN && handlers.onStart) {\n      handlers.onStart(event, context);\n    }\n\n    if (event.state === EventType.ACTIVE && handlers.onActive) {\n      handlers.onActive(event, context);\n    }\n\n    if (event.oldState === EventType.ACTIVE && event.state === EventType.END && handlers.onEnd) {\n      handlers.onEnd(event, context);\n    }\n\n    if (event.oldState === EventType.BEGAN && event.state === EventType.FAILED && handlers.onFail) {\n      handlers.onFail(event, context);\n    }\n\n    if (event.oldState === EventType.ACTIVE && event.state === EventType.CANCELLED && handlers.onCancel) {\n      handlers.onCancel(event, context);\n    }\n\n    if ((event.oldState === EventType.BEGAN || event.oldState === EventType.ACTIVE) && event.state !== EventType.BEGAN && event.state !== EventType.ACTIVE && handlers.onFinish) {\n      handlers.onFinish(event, context, event.state === EventType.CANCELLED || event.state === EventType.FAILED);\n    }\n  };\n\n  if (isWeb()) {\n    return handler;\n  }\n\n  return useEvent(handler, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], doDependenciesDiffer);\n}","map":{"version":3,"sources":["C:/Users/Gigio/Desktop/Eletronicos/tcc/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedGestureHandler.js"],"names":["isWeb","useEvent","useHandler","EventType","useAnimatedGestureHandler","handlers","dependencies","context","doDependenciesDiffer","useWeb","handler","e","event","nativeEvent","state","BEGAN","onStart","ACTIVE","onActive","oldState","END","onEnd","FAILED","onFail","CANCELLED","onCancel","onFinish"],"mappings":"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","sourcesContent":["import { isWeb } from '../PlatformChecker';\r\nimport { useEvent, useHandler } from './Hooks';\r\nexport var EventType;\r\n(function (EventType) {\r\n    EventType[EventType[\"UNDETERMINED\"] = 0] = \"UNDETERMINED\";\r\n    EventType[EventType[\"FAILED\"] = 1] = \"FAILED\";\r\n    EventType[EventType[\"BEGAN\"] = 2] = \"BEGAN\";\r\n    EventType[EventType[\"CANCELLED\"] = 3] = \"CANCELLED\";\r\n    EventType[EventType[\"ACTIVE\"] = 4] = \"ACTIVE\";\r\n    EventType[EventType[\"END\"] = 5] = \"END\";\r\n})(EventType || (EventType = {}));\r\nexport function useAnimatedGestureHandler(handlers, dependencies) {\r\n    const { context, doDependenciesDiffer, useWeb } = useHandler(handlers, dependencies);\r\n    const handler = (e) => {\r\n        'worklet';\r\n        const event = useWeb ? e.nativeEvent : e;\r\n        if (event.state === EventType.BEGAN && handlers.onStart) {\r\n            handlers.onStart(event, context);\r\n        }\r\n        if (event.state === EventType.ACTIVE && handlers.onActive) {\r\n            handlers.onActive(event, context);\r\n        }\r\n        if (event.oldState === EventType.ACTIVE &&\r\n            event.state === EventType.END &&\r\n            handlers.onEnd) {\r\n            handlers.onEnd(event, context);\r\n        }\r\n        if (event.oldState === EventType.BEGAN &&\r\n            event.state === EventType.FAILED &&\r\n            handlers.onFail) {\r\n            handlers.onFail(event, context);\r\n        }\r\n        if (event.oldState === EventType.ACTIVE &&\r\n            event.state === EventType.CANCELLED &&\r\n            handlers.onCancel) {\r\n            handlers.onCancel(event, context);\r\n        }\r\n        if ((event.oldState === EventType.BEGAN ||\r\n            event.oldState === EventType.ACTIVE) &&\r\n            event.state !== EventType.BEGAN &&\r\n            event.state !== EventType.ACTIVE &&\r\n            handlers.onFinish) {\r\n            handlers.onFinish(event, context, event.state === EventType.CANCELLED || event.state === EventType.FAILED);\r\n        }\r\n    };\r\n    if (isWeb()) {\r\n        return handler;\r\n    }\r\n    return useEvent(handler, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], doDependenciesDiffer);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}